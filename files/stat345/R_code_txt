#basic_R
2 + 2
10/3

v = c(1, 4, 5, 3, 7)
v <- c(1, 4, 5, 3, 7)
class(v)
sum(v)
mean(v)
length(v)
max(v)
v[1]
v[3:5]
v[-(2:3)]
v^2
exp(v)
v[v >= 3]
sum(v >= 3)
sum(v >= 3)/2




n = 10
k = 5 
sqrt(n)
log(n)
exp(-k)
factorial(n)
choose(n,k)
sample(n)
sample(n,replace=TRUE)
sample(4, 3, replace=TRUE, prob=c(0.1,0.2,0.3,0.4)) #samples three numbers between 1 and 4, with replacement, and with probabilities given by (0.1,0.2,0.3,0.4)
replicate(5,c(1:3))
prod(c(2, 4, 5))


x = c(1:10)
y = x*x
plot(x, y, type="l")


#birthday_problem:

birthday  = function(k)
{
	prod = 1
	for(i in (365-k+1):365)
	{
		prod = prod*i
	}
	
	return (1-prod/(365^k))
}

num_people = c(2:50)
probability = c()
for(i in 1:length(num_people))
{
	res = birthday(num_people[i])
	probability = cbind(probability, res)
}

plot(num_people, probability, type="l", xlab="number of people", ylab="probability of birthday match")
abline(h = 0.5, col="red", lty="dashed")
title("Birthday problem")


#matching_problem:
n = 100 #100 cards
sample(n)==(1:n) # is a vector of length n, the ith element of which equals 1 if the ith card matches its position in the deck and 0 otherwise
sum(sample(n)==(1:n)) # adds up the elements of the vector, giving us the number of matching cards
res = replicate(10^5,sum(sample(n)==(1:n))) # repeat the experiment 10^5 times, res contains the numbers of matched cards from each run of the experiment
sum(res >= 1)/10^5 # add up the number of times where there was at least one matching card, and we divide by the number of simulations
# you should get 1-1/e~0.63
